•	Testing value of Synapse Permanence Updating When Matching Segments are Found [4]: The purpose of the Test Synapse Permanence Update When Matching Segments Found unit test is to verify that the permanence of synapses in a matching dendritic segment are updated when the segment is activated. Firstly, we initialize the TemporalMemory and Connections object. The Parameters object is used to set the permanence decrement parameter, which is applied to the Connections object. In the test, two sets of columns and cells are used: the previous active columns and cells, and the current active columns and cells. Two matching segments are created in the Connections object, each containing synapses to the previous active cells and a synapse to a different cell. The previous active columns are then computed using the TemporalMemory object, followed by the current active columns. The test then verifies that the synapse permanence of the matching synapses is updated correctly. In a nutshell, this unit test verifies that the TemporalMemory algorithm can update the permanence of synapses in matching dendritic segments correctly.
•	Testing TemporalMemory Algorithms initialization: TestCellsPerColumn [5], TestCustomDimensionsAndCells [6], and TestColumnDimensions [7] are unit tests written to test the initialization of the TemporalMemory class with custom parameters. The first test checks if the class initializes correctly with a custom number of cells per column, while the second test checks if it initializes correctly with custom column dimensions and cells per column. The third test checks if the class initializes correctly with a custom number of column dimensions. To perform the tests, the TemporalMemory class is initialized with a Connections object and the Parameters object, which contains the default parameters for the temporal memory algorithm. The custom parameters are then set using the Set() method of the Parameters object and applied to the Connections object using the apply() method. The TemporalMemory class is then initialized using the initialized Connections object. To check if the initialization was successful, the number of cells in each column is counted and compared to the expected value using the Assert.AreEqual() method. If the number of cells is equal to the expected value, the initialization is considered successful. These tests help to ensure that the TemporalMemory class is properly initialized with the desired custom parameters, which is necessary for the proper functioning of the temporal memory algorithm. Note that these are extensions of original existing test methods [8] [9].
